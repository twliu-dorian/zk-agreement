 pragma circom 2.0.0;

template MiMC5Feistel() {
    signal input iL;
    signal input iR;
    signal input k;

    signal output oL;
    signal output oR;

    var nRounds = 20;
    var c[20] = [
        0,
        634097893266117670779804029563259335201478636511498249266754527661343552989,
        85248008400623053184967049036024367521498167112003374689157107610862181006301,
        53453835234227935618744931653839123181497441296797381748076425571519034810152,
        59550662566457423336699321223888066410056132816083380034254431066774082399154,
        115327380756938186493370232270061780733281832314517337701645260865632116828814,
        22095281910337677778983369461534491580286062229583697373947294738293788923263,
        15173907247042873513584974350239664761611441356979608435412932882552768898862,
        91424389614319511079889266851886394552788907055240507851442186820040632735671,
        82349459253212584321362779030074020284401324198507205338349387519150378477806,
        57800632326799490982252275866129005475951869561365716501675108202185655267619,
        96772164134170966380526821967957182583455379449023458644364997077420364076562,
        61119222268558673189763107571032742812972682141270437726446597514904108018716,
        68635953885824375597865867908412219824769964970504078544258237934212291083756,
        61993485793557744696701989452881497989672405254975248951241659035731156988075,
        35775736458454615898080545233510922873804015975206034760450834211335243989221,
        101809178174338207562590211435552066891437675025618872958857353523667826926222,
        90942026109995782079170378605751746339174903375788651733565046907007812012722,
        86387653644123161512194914108109873142601354503859027838090081835547473632661,
        28522511550030631936409109497299050572639378588666399454019697189085782472054
    ];

    signal lastOutputL[nRounds + 1];
    signal lastOutputR[nRounds + 1];

    var base[nRounds];
    signal base2[nRounds];
    signal base4[nRounds];

    lastOutputL[0] <== iL;
    lastOutputR[0] <== iR;

    for(var i = 0; i < nRounds; i++){
        base[i] = lastOutputR[i] + k + c[i];
        base2[i] <== base[i] * base[i];
        base4[i] <== base2[i] * base2[i];

        lastOutputR[i + 1] <== lastOutputL[i] + base4[i] * base[i];
        lastOutputL[i + 1] <== lastOutputR[i];
    }

    oL <== lastOutputL[nRounds];
    oR <== lastOutputR[nRounds];
}

template MiMC5Sponge(nInputs) {
    signal input k;
    signal input ins[nInputs];
    signal output o;

    signal lastR[nInputs + 1];
    signal lastC[nInputs + 1];

    lastR[0] <== 0;
    lastC[0] <== 0;

    component layers[nInputs];

    for(var i = 0; i < nInputs; i++){
        layers[i] = MiMC5Feistel();

        layers[i].iL <== lastR[i] + ins[i];
        layers[i].iR <== lastC[i];
        layers[i].k <== k;

        lastR[i + 1] <== layers[i].oL;
        lastC[i + 1] <== layers[i].oR;
    }

    o <== lastR[nInputs];
}
// component main = MiMC5Sponge(2);