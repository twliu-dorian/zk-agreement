// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

contract Hasher {
    uint256 p =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256[20] c = [
        0,
        634097893266117670779804029563259335201478636511498249266754527661343552989,
        85248008400623053184967049036024367521498167112003374689157107610862181006301,
        53453835234227935618744931653839123181497441296797381748076425571519034810152,
        59550662566457423336699321223888066410056132816083380034254431066774082399154,
        115327380756938186493370232270061780733281832314517337701645260865632116828814,
        22095281910337677778983369461534491580286062229583697373947294738293788923263,
        15173907247042873513584974350239664761611441356979608435412932882552768898862,
        91424389614319511079889266851886394552788907055240507851442186820040632735671,
        82349459253212584321362779030074020284401324198507205338349387519150378477806,
        57800632326799490982252275866129005475951869561365716501675108202185655267619,
        96772164134170966380526821967957182583455379449023458644364997077420364076562,
        61119222268558673189763107571032742812972682141270437726446597514904108018716,
        68635953885824375597865867908412219824769964970504078544258237934212291083756,
        61993485793557744696701989452881497989672405254975248951241659035731156988075,
        35775736458454615898080545233510922873804015975206034760450834211335243989221,
        101809178174338207562590211435552066891437675025618872958857353523667826926222,
        90942026109995782079170378605751746339174903375788651733565046907007812012722,
        86387653644123161512194914108109873142601354503859027838090081835547473632661,
        28522511550030631936409109497299050572639378588666399454019697189085782472054
    ];

    function MiMC5Feistel(
        uint256 _iL,
        uint256 _iR,
        uint256 _k
    ) internal view returns (uint256 oL, uint256 oR) {
        uint8 nRounds = 20;

        uint256 lastL = _iL;
        uint256 lastR = _iR;

        uint256 mask;
        uint256 mask2;
        uint256 mask4;
        uint256 temp;

        for (uint8 i = 0; i < nRounds; i++) {
            mask = addmod(lastR, _k, p);
            mask = addmod(mask, c[i], p);
            mask2 = mulmod(mask, mask, p);
            mask4 = mulmod(mask2, mask2, p);
            mask = mulmod(mask4, mask, p);

            temp = lastR;
            lastR = addmod(lastL, mask, p);
            lastL = temp;
        }

        return (lastL, lastR);
    }
    function MiMC5Sponge(
        uint256[2] memory _ins,
        uint256 _k
    ) external view returns (uint256 h) {
        uint256 lastR = 0;
        uint256 lastC = 0;

        for (uint8 i = 0; i < _ins.length; i++) {
            lastR = addmod(lastR, _ins[i], p);
            (lastR, lastC) = MiMC5Feistel(lastR, lastC, _k);
        }

        h = lastR;
    }
}
